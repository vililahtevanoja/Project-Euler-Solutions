// Problem 012 - Highly divisible triangular number
//
// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

object problem012 {
  def getNumberOfDivisors(n: Long): Long = {
    List.range(1L, math.sqrt(n).toLong)
      .fold(0L) { (acc, x) =>
        ((n % x == 0), (n / x > 0)) match {
          case (true, true) => acc + 2L
          case (true, false) => acc + 1L
          case (false, _) => acc
        }
      }
  }

  def getDivisors(n: Long): List[Long] = {
    List.range(1L, math.sqrt(n).toLong)
      .foldLeft(List[Long]()) {case (ls, x) =>
        ((n % x == 0), (n / x > 0)) match {
          case (true, true) => ls :+ x :+ (n / x)
          case (true, false) => ls :+ x
          case (false, _) => ls
        }
      }
      .sorted
      .distinct
  }
  
  def getTriangleNumbers: Iterator[Long] = {
    Iterator.iterate((1L, 1L)) {case (i, n) => (i+1, n+i+1)}.map(_._2)
  }

  def solve = {
    getTriangleNumbers.find(getNumberOfDivisors(_) > 500) match {
      case Some(x: Long) => x
      case None => println("Error: None returned")
    }
  }
}
